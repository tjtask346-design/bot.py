import logging
import re
import os
import asyncio
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
import yt_dlp

# ‡¶≤‡¶ó‡¶ø‡¶Ç ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶¨‡¶ü ‡¶ü‡ßã‡¶ï‡ßá‡¶®
TOKEN = "8252054122:AAGicJLaNKnXPBDuLkQ3cH4QdhOaSRJSEdA"

# ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá‡¶∞ ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï
GROUP_LINK = "https://t.me/allapkm0d369"
GROUP_MESSAGE = "‡¶è‡¶á ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá CapCut Pro, Remini Premium, LightRoom ‡¶∏‡¶π ‡¶Ø‡ßá‡¶ï‡ßã‡¶®‡ßã App ‡¶è‡¶∞ Premium Apk Mod ‡¶™‡ßá‡ßü‡ßá ‡¶Ø‡¶æ‡¶¨‡ßá‡¶® : https://t.me/allapkm0d369"

# URL ‡¶™‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ö ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∞‡ßá‡¶ó‡ßÅ‡¶≤‡¶æ‡¶∞ ‡¶è‡¶ï‡ßç‡¶∏‡¶™‡ßç‡¶∞‡ßá‡¶∂‡¶®
YOUTUBE_REGEX = r'(https?://)?(www\.)?(youtube|youtu|youtube-nocookie)\.(com|be)/(watch\?v=|embed/|v/|.+\?v=)?([^&=%\?]{11})'
INSTAGRAM_REGEX = r'(https?://)?(www\.)?(instagram\.com|instagr\.am)/(p|reel)/([a-zA-Z0-9_-]+)'
TWITTER_REGEX = r'(https?://)?(www\.)?(twitter\.com|x\.com)/([a-zA-Z0-9_]+)/status/([0-9]+)'

# Conversation states
SELECT_FORMAT, SELECT_RESOLUTION = range(2)

# User data keys
URL_KEY = 'url'
TITLE_KEY = 'title'
PLATFORM_KEY = 'platform'

class TelegramProgressHook:
    def __init__(self, update, context, url, platform, resolution=None):
        self.update = update
        self.context = context
        self.url = url
        self.platform = platform
        self.resolution = resolution
        self.progress_message_sent = False
        self.progress_message_id = None
        
    def hook(self, d):
        if d['status'] == 'downloading' and not self.progress_message_sent:
            # ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶è‡¶ï‡¶¨‡¶æ‡¶∞ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶¶‡ßá‡¶ñ‡¶æ‡¶¨‡ßá
            asyncio.create_task(self.show_progress_message())
            self.progress_message_sent = True
                    
        elif d['status'] == 'finished':
            asyncio.create_task(self.delete_progress_message())
    
    async def show_progress_message(self):
        """‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶≤‡ßá ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶¶‡ßá‡¶ñ‡¶æ‡¶® (‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶è‡¶ï‡¶¨‡¶æ‡¶∞)"""
        try:
            if self.platform == "YouTube" and self.resolution:
                progress_text = f"üîç {self.resolution} ‡¶∞‡ßá‡¶ú‡ßã‡¶≤‡¶ø‡¶â‡¶∂‡¶®‡ßá YouTube ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá..."
            elif self.platform == "YouTube":
                progress_text = f"üîç YouTube ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá..."
            elif self.platform == "Instagram":
                progress_text = f"üîç Instagram ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá..."
            elif self.platform == "X (Twitter)":
                progress_text = f"üîç X (Twitter) ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá..."
            elif self.platform == "TikTok":
                progress_text = f"üîç TikTok ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá..."
            else:
                progress_text = f"üîç ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá..."
            
            message = await self.update.message.reply_text(progress_text)
            self.progress_message_id = message.message_id
                
        except Exception as e:
            logger.error(f"Progress message error: {e}")
    
    async def delete_progress_message(self):
        """‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶∂‡ßá‡¶∑‡ßá ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®"""
        try:
            if self.progress_message_id:
                await self.context.bot.delete_message(
                    chat_id=self.update.effective_chat.id,
                    message_id=self.progress_message_id
                )
        except Exception as e:
            logger.error(f"Progress message delete error: {e}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶ï‡ßá ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡ßá‡¶∂‡¶®‡¶æ ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã"""
    welcome_text = """
    üéâ ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ! ‡¶Ü‡¶Æ‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶°‡¶æ‡¶∞ ‡¶¨‡¶ü‡•§

    ‡¶Ü‡¶Æ‡¶ø ‡¶®‡¶ø‡¶Æ‡ßç‡¶®‡¶≤‡¶ø‡¶ñ‡¶ø‡¶§ ‡¶™‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶ü‡¶´‡¶∞‡ßç‡¶Æ ‡¶•‡ßá‡¶ï‡ßá ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø:
    ‚Ä¢ YouTube
    ‚Ä¢ TikTok
    ‚Ä¢ Instagram
    ‚Ä¢ X (Twitter)

    ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì‡¶∞ ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï‡¶ü‡¶ø ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶™‡ßá‡¶∏‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®!
    """
    await update.message.reply_text(welcome_text)

    # ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã
    await update.message.reply_text(GROUP_MESSAGE)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã"""
    help_text = """
    ü§ñ ‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá ‡¶è‡¶á ‡¶¨‡¶ü ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶¨‡ßá‡¶®:

    ‡¶∏‡¶Æ‡¶∞‡ßç‡¶•‡¶ø‡¶§ ‡¶™‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶ü‡¶´‡¶∞‡ßç‡¶Æ:
    1. YouTube: https://www.youtube.com/watch?v=VIDEO_ID
    2. TikTok: https://www.tiktok.com/@username/video/VIDEO_ID
    3. Instagram: https://www.instagram.com/p/POST_ID/ or https://www.instagram.com/reel/REEL_ID/
    4. X (Twitter): https://twitter.com/username/status/TWEET_ID or https://x.com/username/status/TWEET_ID

    ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶è‡¶ï‡¶ü‡¶ø ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶™‡¶æ‡¶†‡¶æ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶Ü‡¶Æ‡¶ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶Ö‡¶™‡¶∂‡¶® ‡¶¶‡ßá‡¶¨!
    """
    await update.message.reply_text(help_text)

    # ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã
    await update.message.reply_text(GROUP_MESSAGE)

def is_youtube_url(url):
    """URL ‡¶ü‡¶ø YouTube ‡¶è‡¶∞ ‡¶ï‡¶ø‡¶®‡¶æ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®"""
    return re.match(YOUTUBE_REGEX, url) is not None

def is_instagram_url(url):
    """URL ‡¶ü‡¶ø Instagram ‡¶è‡¶∞ ‡¶ï‡¶ø‡¶®‡¶æ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®"""
    return re.match(INSTAGRAM_REGEX, url) is not None

def is_twitter_url(url):
    """URL ‡¶ü‡¶ø Twitter/X ‡¶è‡¶∞ ‡¶ï‡¶ø‡¶®‡¶æ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®"""
    return re.match(TWITTER_REGEX, url) is not None

def is_tiktok_url(url):
    """URL ‡¶ü‡¶ø TikTok ‡¶è‡¶∞ ‡¶ï‡¶ø‡¶®‡¶æ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®"""
    # TikTok ‡¶è‡¶∞ ‡¶¨‡¶ø‡¶≠‡¶ø‡¶®‡ßç‡¶® ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü ‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ
    tiktok_patterns = [
        r'https?://(www\.)?tiktok\.com/([a-zA-Z0-9._-]+)/video/(\d+)',
        r'https?://(www\.)?tiktok\.com/@[a-zA-Z0-9._-]+/video/\d+',
        r'https?://vm\.tiktok\.com/[a-zA-Z0-9]+',
        r'https?://vt\.tiktok\.com/[a-zA-Z0-9]+',
        r'https?://tiktok\.com/t/[a-zA-Z0-9]+',
        r'https?://(www\.)?tiktok\.com/([a-zA-Z0-9._-]+)/(video)/(\d+)'
    ]
    
    for pattern in tiktok_patterns:
        if re.match(pattern, url):
            return True
    return False

def get_platform_name(url):
    """URL ‡¶•‡ßá‡¶ï‡ßá ‡¶™‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶ü‡¶´‡¶∞‡ßç‡¶Æ‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶®‡¶ø‡¶∞‡ßç‡¶£‡¶Ø‡¶º ‡¶ï‡¶∞‡ßÅ‡¶®"""
    if is_youtube_url(url):
        return "YouTube"
    elif is_instagram_url(url):
        return "Instagram"
    elif is_twitter_url(url):
        return "X (Twitter)"
    elif is_tiktok_url(url):
        return "TikTok"
    else:
        return "Unknown"

async def handle_video_url(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """‡¶≠‡¶ø‡¶°‡¶ø‡¶ì URL ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶Ö‡¶™‡¶∂‡¶® ‡¶¶‡¶ø‡¶®"""
    url = update.message.text
    platform = get_platform_name(url)
    
    if platform == "Unknown":
        await update.message.reply_text("‚ùå ‡¶Ö‡¶ú‡¶æ‡¶®‡¶æ ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü‡•§ ‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶®‡¶ø‡¶Æ‡ßç‡¶®‡¶≤‡¶ø‡¶ñ‡¶ø‡¶§ ‡¶™‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶ü‡¶´‡¶∞‡ßç‡¶Æ‡¶ó‡ßÅ‡¶≤‡¶ø‡¶∞ ‡¶è‡¶ï‡¶ü‡¶ø ‡¶¨‡ßà‡¶ß ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®:\n‚Ä¢ YouTube\n‚Ä¢ TikTok\n‚Ä¢ Instagram\n‚Ä¢ X (Twitter)")
        await update.message.reply_text(GROUP_MESSAGE)
        return ConversationHandler.END
    
    context.user_data[URL_KEY] = url
    context.user_data[PLATFORM_KEY] = platform

    # ‡¶∏‡¶¨ ‡¶™‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶ü‡¶´‡¶∞‡ßç‡¶Æ‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì/‡¶Ö‡¶°‡¶ø‡¶ì ‡¶Ö‡¶™‡¶∂‡¶® ‡¶¶‡¶ø‡¶®
    keyboard = [['‡¶≠‡¶ø‡¶°‡¶ø‡¶ì', '‡¶Ö‡¶°‡¶ø‡¶ì']]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    
    await update.message.reply_text(
        f"‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡¶ø ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶®‡¶æ‡¶ï‡¶ø ‡¶Ö‡¶°‡¶ø‡¶ì ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶®?",
        reply_markup=reply_markup
    )
    return SELECT_FORMAT

async def select_format(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶∞ ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡¶∂‡¶® ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤ ‡¶ï‡¶∞‡ßÅ‡¶®"""
    format_choice = update.message.text
    platform = context.user_data[PLATFORM_KEY]
    url = context.user_data[URL_KEY]

    if format_choice == '‡¶Ö‡¶°‡¶ø‡¶ì':
        # ‡¶∏‡¶¨ ‡¶™‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶ü‡¶´‡¶∞‡ßç‡¶Æ‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ö‡¶°‡¶ø‡¶ì ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶°
        await update.message.reply_text(f"üîç {platform} ‡¶•‡ßá‡¶ï‡ßá ‡¶Ö‡¶°‡¶ø‡¶ì ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...", reply_markup=ReplyKeyboardRemove())
        success, result = await download_audio(url, platform, update, context)
        await handle_download_result(update, context, success, result, platform)
        return ConversationHandler.END

    elif format_choice == '‡¶≠‡¶ø‡¶°‡¶ø‡¶ì':
        # ‡¶∞‡ßá‡¶ú‡ßã‡¶≤‡¶ø‡¶â‡¶∂‡¶® ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶Ö‡¶™‡¶∂‡¶® ‡¶¶‡¶ø‡¶® (‡¶∏‡¶¨ ‡¶™‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶ü‡¶´‡¶∞‡ßç‡¶Æ‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø)
        keyboard = [['360p', '480p'], ['720p', '1080p']]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

        await update.message.reply_text(
            "‡¶ï‡ßã‡¶® ‡¶∞‡ßá‡¶ú‡ßã‡¶≤‡¶ø‡¶â‡¶∂‡¶®‡ßá ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶®?",
            reply_markup=reply_markup
        )
        return SELECT_RESOLUTION

async def select_resolution(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """‡¶∞‡ßá‡¶ú‡ßã‡¶≤‡¶ø‡¶â‡¶∂‡¶® ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡¶∂‡¶® ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤ ‡¶ï‡¶∞‡ßÅ‡¶®"""
    resolution_choice = update.message.text
    url = context.user_data[URL_KEY]
    platform = context.user_data[PLATFORM_KEY]
    
    resolution_map = {
        '360p': 'best[height<=360]',
        '480p': 'best[height<=480]', 
        '720p': 'best[height<=720]',
        '1080p': 'best[height<=1080]'
    }
    
    format_string = resolution_map.get(resolution_choice, 'best[height<=720]')
    
    await update.message.reply_text(f"üîç {resolution_choice} ‡¶∞‡ßá‡¶ú‡ßã‡¶≤‡¶ø‡¶â‡¶∂‡¶®‡ßá {platform} ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...", reply_markup=ReplyKeyboardRemove())
    success, result = await download_video(url, platform, format_string, resolution_choice, update, context)
    await handle_download_result(update, context, success, result, platform)
    return ConversationHandler.END

async def handle_download_result(update: Update, context: ContextTypes.DEFAULT_TYPE, success: bool, result, platform: str):
    """‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶∞‡ßá‡¶ú‡¶æ‡¶≤‡ßç‡¶ü ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤ ‡¶ï‡¶∞‡ßÅ‡¶®"""
    if success:
        filename, title, file_type = result
        
        try:
            # ‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡¶æ‡¶á‡¶ú ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®
            file_size = os.path.getsize(filename)
            max_size = 50 * 1024 * 1024  # 50MB
            
            if file_size > max_size:
                await update.message.reply_text("‚ùå ‡¶´‡¶æ‡¶á‡¶≤‡¶ü‡¶ø ‡¶ñ‡ßÅ‡¶¨ ‡¶¨‡¶°‡¶º (50MB ‡¶è‡¶∞ ‡¶¨‡ßá‡¶∂‡¶ø)‡•§ ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ‡ßá ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶∏‡¶Æ‡ßç‡¶≠‡¶¨ ‡¶®‡¶Ø‡¶º‡•§")
            else:
                await update.message.reply_text("‚úÖ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶®! ‡¶è‡¶ñ‡¶® ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
                
                if file_type == 'audio':
                    with open(filename, 'rb') as audio_file:
                        await update.message.reply_audio(audio=audio_file, title=title)
                else:
                    with open(filename, 'rb') as video_file:
                        await update.message.reply_video(video=video_file, caption=title)
                        
                await update.message.reply_text("üéâ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!")
                
        except Exception as e:
            logger.error(f"‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {e}")
            await update.message.reply_text("‚ùå ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®„ÄÇ")
        
        # ‡¶´‡¶æ‡¶á‡¶≤ ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
        try:
            os.remove(filename)
        except Exception as e:
            logger.error(f"‡¶´‡¶æ‡¶á‡¶≤ ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {e}")
    else:
        error_msg = result
        await update.message.reply_text(f"‚ùå {platform} ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá: {error_msg}")

    # ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã
    await update.message.reply_text(GROUP_MESSAGE)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """‡¶ï‡¶®‡¶≠‡¶æ‡¶∞‡¶∏‡ßá‡¶∂‡¶® ‡¶ï‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶∏‡ßá‡¶≤ ‡¶ï‡¶∞‡ßÅ‡¶®"""
    await update.message.reply_text(
        '‡¶Ö‡¶™‡¶æ‡¶∞‡ßá‡¶∂‡¶® ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶Ü‡¶™‡¶®‡¶ø ‡¶ö‡¶æ‡¶á‡¶≤‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶è‡¶ï‡¶ü‡¶ø ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶™‡¶æ‡¶†‡¶æ‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®‡•§',
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

async def download_video(url, platform, format_string, resolution, update, context):
    """‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®"""
    try:
        if platform == "YouTube":
            ydl_opts = {
                'format': format_string,
                'outtmpl': f'{platform}_%(title)s.%(ext)s',
                'quiet': True,
                'progress_hooks': [TelegramProgressHook(update, context, url, platform, resolution).hook],
            }
        else:
            # Instagram, Twitter, TikTok ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø best format ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®
            ydl_opts = {
                'format': 'best',
                'outtmpl': f'{platform}_%(title)s.%(ext)s',
                'quiet': True,
                'progress_hooks': [TelegramProgressHook(update, context, url, platform, resolution).hook],
            }

        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            filename = ydl.prepare_filename(info)
            title = info.get('title', f'{platform} ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì')
            
            return True, (filename, title, 'video')
    except Exception as e:
        logger.error(f"{platform} ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {e}")
        return False, str(e)

async def download_audio(url, platform, update, context):
    """‡¶Ö‡¶°‡¶ø‡¶ì ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®"""
    try:
        ydl_opts = {
            'format': 'bestaudio/best',
            'postprocessors': [{
                'key': 'FFmpegExtractAudio',
                'preferredcodec': 'mp3',
                'preferredquality': '192',
            }],
            'outtmpl': f'{platform}_%(title)s.%(ext)s',
            'quiet': True,
            'progress_hooks': [TelegramProgressHook(update, context, url, platform).hook],
        }

        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            filename = ydl.prepare_filename(info)
            filename = os.path.splitext(filename)[0] + '.mp3'
            title = info.get('title', f'{platform} ‡¶Ö‡¶°‡¶ø‡¶ì')
            
            return True, (filename, title, 'audio')
    except Exception as e:
        logger.error(f"{platform} ‡¶Ö‡¶°‡¶ø‡¶ì ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {e}")
        return False, str(e)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """‡¶á‡¶®‡¶ï‡¶æ‡¶Æ‡¶ø‡¶Ç ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤ ‡¶ï‡¶∞‡ßÅ‡¶®"""
    user_message = update.message.text

    if is_youtube_url(user_message) or is_instagram_url(user_message) or is_twitter_url(user_message) or is_tiktok_url(user_message):
        return await handle_video_url(update, context)
    else:
        await update.message.reply_text("‚ùå ‡¶Ö‡¶ú‡¶æ‡¶®‡¶æ ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü‡•§ ‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶®‡¶ø‡¶Æ‡ßç‡¶®‡¶≤‡¶ø‡¶ñ‡¶ø‡¶§ ‡¶™‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶ü‡¶´‡¶∞‡ßç‡¶Æ‡¶ó‡ßÅ‡¶≤‡¶ø‡¶∞ ‡¶è‡¶ï‡¶ü‡¶ø ‡¶¨‡ßà‡¶ß ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®:\n‚Ä¢ YouTube\n‚Ä¢ TikTok\n‚Ä¢ Instagram\n‚Ä¢ X (Twitter)")
        await update.message.reply_text(GROUP_MESSAGE)
        return ConversationHandler.END

def main():
    """‡¶¨‡¶ü ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®"""
    application = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)],
        states={
            SELECT_FORMAT: [MessageHandler(filters.Regex('^(‡¶≠‡¶ø‡¶°‡¶ø‡¶ì|‡¶Ö‡¶°‡¶ø‡¶ì)$'), select_format)],
            SELECT_RESOLUTION: [MessageHandler(filters.Regex('^(360p|480p|720p|1080p)$'), select_resolution)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("cancel", cancel))
    application.add_handler(conv_handler)

    print("‡¶¨‡¶ü ‡¶ö‡¶≤‡¶õ‡ßá...")
    application.run_polling()

if __name__ == '__main__':
    main()
